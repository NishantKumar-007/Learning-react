Class based components - (older way)
------------------------------------------------------------
1.Why are we learning-
    -Asked in interviews.
    -Some companies still use it.
    -Better understanding of react life cycle.

2.What are we building-
    - In about us section build a user profile of myself using 
        class based components.

3.We will create a functional component first and then convert it to
    class based component just for sake of learning.

4.Class based component is a JS class at the end of the day.
example code
    //our class is inheriting from React.Component class provided by React.
    - class UserClass extends React.Component{
        //render method returns JSX
        render(){
            return ( <div>
                <h2> Hello </h2>
            </div>
            );
        }
    }
    export deault UserClass;
5.way of importing and exporting is same in both class based and functional component.

6.props -> sending props is same.
        -> we recieve it in constructor
            -> e.g constructor(props){
                super(props)
                console.log(props);
            }
        -> why we use super(props) - https://www.turing.com/kb/beginners-guide-to-super-and-super-props-in-react
        -> how to use -> this.props.name ("this" keyword necessary);
        -> destrucutring works same as functional component.

7. state variables and hooks->
    ->whenever we create an instance of a class constructor is called => here creating an instance is synonymous with whenever the component is loaded.
    ->where to define state variable -
    ->how to create - this.state = {
        count:0;
    }
    ->multiple state variable - this.state{
        count:0,
        count2:0
    }
    ->how to use - {this.state.count}
    ->how to update state variables - this.setState(
        count: this.state.count+1;
    )

8.React Lifecycle 
    -> order of calling 
        -> parent constructor -> parent render -> child 1 constructor -> child 1 render -> child 2 constructor ->
             child 2 render ->  child 1 didMount ->((if setState is called)...rerender and componentDidUpdate...)-> child 2 didmount -> parent didMount
    -> componentDidMount is another method which is called after render method.
        -> It is used to call api after the component has mounted/loaded.
        -> we dont want to wait for api data , render first then populate with data and rerender.
    -> this lifecycle has two phases - render phase(constructor and render) and commit phase(component did mount)
    -> componentWillUnmount when a different component in called. move to a different component.  

